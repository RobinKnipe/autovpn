#!/bin/bash

# check for properties file
if [ -f "${props_file}" ] ; then
  source ${props_file}
fi
# replace empty values with defaults
default_open_filename_pattern='^.+\.ovpn$'
open_filename_pattern=${file_name_pattern:-$default_filename_pattern}
default_exclude_files=".*\.crdownload|\.org\.chromium\.Chromium\..*"
exclude_files="${exclude_files:-$default_exclude_files}"
default_download_dir="${USER_HOME}/Downloads"
download_dir="${download_dir:-$default_download_dir}"

# Watch the Downloads directory for new VPN config files
inotifywait -mqe create --exclude "${exclude_files}" "${default_download_dir}" |
  while read path event file
  do
    # Check if the file looks like VPN config we want
    if [ "${event}" = "CREATE" ] && [[ "${file}" =~ ${filename_pattern} ]]
    then
      # Get the VPN name
      vpn=`echo ${file} | awk -F '-' '{print $2}'`

      # Check if an old connection already exists
      if [ -n "${close_filename_pattern}" ] ; then
        close_file_match=`grep -Eo "${close_filename_pattern}"`
        cons=`pgrep --list-full openvpn | grep "${close_file_match}" | awk '{print $2}'`
        if [ -n "${cons}" ]
        then
          echo "Removing old '${close_file_match}' VPN connection..."
          kill ${cons}
        fi
      fi

      # Connect to the VPN
      echo "Connecting to the '${vpn}' VPN..."
      openvpn --config "${path}${file}" &

      # Wait a mo then remove the VPN config file
      if [ "${auto_remove}" != "no" ] || [ "${auto_remove}" != "false" ] ; then
        sleep 2
        rm "${path}${file}"
      fi
    fi
  done
